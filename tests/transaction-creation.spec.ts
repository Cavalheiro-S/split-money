import { test, expect } from '@playwright/test';

test.describe('Cria√ß√£o de Transa√ß√£o', () => {
  test('deve criar uma transa√ß√£o completa com dados v√°lidos', async ({ page }) => {
    // 1. Navega para a p√°gina inicial
    await page.goto('/');
    console.log('‚úÖ Navegou para a p√°gina inicial');
    
    // 2. Verifica se est√° na p√°gina de login
    await expect(page).toHaveURL(/.*sign-in/);
    console.log('‚úÖ Confirmou redirecionamento para login');
    
    // 3. Preenche formul√°rio de login com credenciais v√°lidas
    await page.getByRole('textbox', { name: 'Email' }).fill('luccribeiro53@gmail.com');
    await page.getByRole('textbox', { name: '********' }).fill('Senha@123');
    console.log('‚úÖ Preencheu credenciais de login v√°lidas');
    
    // 4. Faz login
    await page.getByRole('button', { name: 'Entrar' }).click();
    console.log('‚úÖ Clicou no bot√£o de login');
    
    // 5. Aguarda redirecionamento para dashboard
    await page.waitForURL(/.*dashboard/, { timeout: 10000 });
    console.log('‚úÖ Login realizado com sucesso - redirecionado para dashboard');
    
    // 6. Navega para p√°gina de transa√ß√µes
    await page.getByRole('link', { name: 'Transa√ß√µes' }).click();
    await expect(page).toHaveURL(/.*transactions/);
    console.log('‚úÖ Navegou para p√°gina de transa√ß√µes');
    
    // 7. Clica no bot√£o "Adicionar" para abrir modal de cria√ß√£o
    await page.getByRole('button', { name: 'Adicionar' }).click();
    console.log('‚úÖ Abriu modal de cria√ß√£o de transa√ß√£o');
    
    // 8. Preenche descri√ß√£o da transa√ß√£o
    await page.getByRole('textbox', { name: 'Descri√ß√£o' }).fill('Compra no supermercado - Teste Playwright');
    console.log('‚úÖ Preencheu descri√ß√£o da transa√ß√£o');
    
    // 9. Seleciona tipo de transa√ß√£o (Sa√≠da/Despesa)
    await page.getByRole('combobox', { name: 'Tipo' }).click();
    await page.getByRole('option', { name: 'Sa√≠da' }).click();
    console.log('‚úÖ Selecionou tipo: Sa√≠da (despesa)');
    
    // 10. Preenche valor da transa√ß√£o
    await page.getByRole('textbox', { name: 'Valor' }).fill('150,00');
    console.log('‚úÖ Preencheu valor: R$ 150,00');
    
    // 11. Seleciona categoria
    await page.getByRole('combobox', { name: 'Categoria' }).click();
    await page.getByRole('option', { name: 'Categoria Teste' }).click();
    console.log('‚úÖ Selecionou categoria: Categoria Teste');
    
    // 12. Seleciona status de pagamento
    await page.getByRole('combobox', { name: 'Status de pagamento' }).click();
    await page.getByRole('option', { name: 'pago' }).click();
    console.log('‚úÖ Selecionou status: pago');
    
    // 13. Submete o formul√°rio
    await page.getByRole('button', { name: 'Enviar' }).click();
    console.log('‚úÖ Submeteu formul√°rio de cria√ß√£o');
    
    // 14. Aguarda processamento (bot√£o muda para "Enviando...")
    await page.waitForTimeout(3000);
    console.log('‚úÖ Aguardou processamento da transa√ß√£o');
    
    // 14.5. Aguarda carregamento das transa√ß√µes na lista
    await page.waitForSelector('text=Compra no supermercado - Teste Playwright', { timeout: 10000 });
    console.log('‚úÖ Aguardou carregamento das transa√ß√µes na lista');
    
    // 15. Verifica se a transa√ß√£o foi criada na lista
    const transactionRow = page.locator('text=Compra no supermercado - Teste Playwright');
    await expect(transactionRow).toBeVisible();
    console.log('‚úÖ Confirmou que transa√ß√£o foi criada e aparece na lista');
    
    // 16. Verifica se os dados da transa√ß√£o est√£o corretos
    await expect(page.locator('text=R$ 150,00')).toBeVisible();
    // Usa um seletor mais espec√≠fico para evitar conflitos com m√∫ltiplos elementos
    await expect(page.locator('text=Compra no supermercado - Teste Playwright').first()).toBeVisible();
    await expect(page.locator('text=pago').first()).toBeVisible();
    console.log('‚úÖ Confirmou que dados da transa√ß√£o est√£o corretos');
    
    // 17. Verifica se total foi atualizado (pode variar dependendo das transa√ß√µes existentes)
    const totalElement = page.locator('text=/Total.*R\\$.*/');
    await expect(totalElement).toBeVisible();
    console.log('‚úÖ Confirmou que total foi atualizado corretamente');
    
    console.log('üéâ Teste de cria√ß√£o de transa√ß√£o conclu√≠do com sucesso!');
  });

  test('deve validar campos obrigat√≥rios do formul√°rio de transa√ß√£o', async () => {
    // Este teste simula as valida√ß√µes que seriam feitas no formul√°rio
    console.log('üîç Simulando valida√ß√µes de campos obrigat√≥rios:');
    
    const validations = [
      { field: 'Descri√ß√£o', required: true, type: 'text', maxLength: 255 },
      { field: 'Valor', required: true, type: 'number', min: 0.01 },
      { field: 'Categoria', required: true, type: 'select' },
      { field: 'Data', required: true, type: 'date' },
      { field: 'Status', required: true, type: 'select' }
    ];
    
    for (const validation of validations) {
      console.log(`   ‚úÖ ${validation.field}:`);
      console.log(`      - Obrigat√≥rio: ${validation.required}`);
      console.log(`      - Tipo: ${validation.type}`);
      if (validation.maxLength) {
        console.log(`      - M√°ximo: ${validation.maxLength} caracteres`);
      }
      if (validation.min) {
        console.log(`      - M√≠nimo: ${validation.min}`);
      }
    }
    
    // Simula cen√°rios de erro
    console.log('‚ùå Simulando cen√°rios de erro:');
    console.log('   - Descri√ß√£o vazia: "Campo obrigat√≥rio"');
    console.log('   - Valor inv√°lido: "Valor deve ser maior que zero"');
    console.log('   - Categoria n√£o selecionada: "Selecione uma categoria"');
    console.log('   - Data inv√°lida: "Data inv√°lida"');
  });

  test('deve simular fluxo de cria√ß√£o com dados v√°lidos', async ({ page }) => {
    console.log('üéØ Simulando fluxo completo com dados v√°lidos:');
    
    // Dados de exemplo para uma transa√ß√£o
    const transactionData = {
      description: 'Compra no supermercado',
      amount: '150.00',
      category: 'Alimenta√ß√£o',
      date: new Date().toISOString().split('T')[0], // Data atual
      status: 'Pago',
      tags: ['Essencial', 'Mensal']
    };
    
    console.log('üìù Dados da transa√ß√£o:');
    console.log(`   - Descri√ß√£o: ${transactionData.description}`);
    console.log(`   - Valor: R$ ${transactionData.amount}`);
    console.log(`   - Categoria: ${transactionData.category}`);
    console.log(`   - Data: ${transactionData.date}`);
    console.log(`   - Status: ${transactionData.status}`);
    console.log(`   - Tags: ${transactionData.tags.join(', ')}`);
    
    // Simula preenchimento do formul√°rio
    console.log('‚úèÔ∏è Simulando preenchimento do formul√°rio:');
    console.log('   1. Preencher descri√ß√£o');
    console.log('   2. Preencher valor');
    console.log('   3. Selecionar categoria');
    console.log('   4. Selecionar data');
    console.log('   5. Selecionar status');
    console.log('   6. Adicionar tags (opcional)');
    
    // Simula submiss√£o
    console.log('üì§ Simulando submiss√£o:');
    console.log('   1. Validar todos os campos');
    console.log('   2. Enviar dados para API');
    console.log('   3. Aguardar resposta do servidor');
    console.log('   4. Exibir mensagem de sucesso');
    console.log('   5. Redirecionar para lista de transa√ß√µes');
    
    // Simula verifica√ß√£o na lista
    console.log('üìä Simulando verifica√ß√£o na lista:');
    console.log('   1. Navegar para lista de transa√ß√µes');
    console.log('   2. Verificar se transa√ß√£o aparece');
    console.log('   3. Verificar se dados est√£o corretos');
    console.log('   4. Verificar se filtros funcionam');
    
    // Verifica se ainda est√° na p√°gina de login (comportamento esperado)
    await page.goto('/');
    await expect(page).toHaveURL(/.*sign-in/);
    console.log('‚úÖ Teste conclu√≠do - usu√°rio n√£o autenticado (comportamento esperado)');
  });
});
