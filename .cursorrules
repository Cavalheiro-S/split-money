# Cursor Rules for Split Money - Personal Finance Management App

Split Money é uma aplicação web para controle financeiro pessoal, construída com Next.js 15, TypeScript e ShadCN/UI.

## Tecnologias e Stack
- **Framework**: Next.js 15 (App Router)
- **Language**: TypeScript (strict mode)
- **UI Library**: ShadCN/UI + Radix UI
- **Styling**: Tailwind CSS
- **Forms**: React Hook Form + Zod (validation)
- **HTTP Client**: Axios
- **Testing**: Playwright
- **Icons**: Lucide React

## Domínio da Aplicação

### Entidades Principais
- **Transactions**: Receitas e despesas com categorização
- **Categories**: Categorias para organização das transações
- **Tags**: Etiquetas adicionais para classificação
- **PaymentStatus**: Status de pagamento (pago, pendente, etc.)
- **User**: Usuário autenticado do sistema

### Funcionalidades Core
- Autenticação (sign-in, sign-up, password recovery)
- Gestão de transações (CRUD)
- Dashboard com visualização de dados financeiros
- Configurações (categorias, tags, status de pagamento)
- Perfil do usuário

## Estrutura do Projeto

### Arquitetura (Feature-First)
```
app/
├── (auth)/          # Rotas de autenticação
├── (logged)/        # Rotas protegidas
│   ├── dashboard/   # Painel principal
│   ├── transactions/ # Gestão de transações
│   ├── config/      # Configurações
│   └── profile/     # Perfil do usuário
└── api/             # API routes

components/
├── ui/              # Componentes ShadCN (não editar)
├── forms/           # Formulários da aplicação
└── transaction-table/ # Tabela de transações

lib/                 # Utilities e helpers
services/            # Camada de serviços (API calls)
types/               # Definições TypeScript
hooks/               # React hooks customizados
contexts/            # React contexts
```

## Regras de Desenvolvimento

### 1. Componentes e Estrutura
- **Server Components por padrão**: Use `"use client"` apenas quando necessário
- **Formulários**: Sempre use React Hook Form + Zod + ShadCN Form
- **Tipagem**: Todos os componentes devem ter props tipadas
- **Imports**: Use path alias `@/` para imports relativos

### 2. Padrões de Código
- **Naming Convention**: 
  - Arquivos/pastas: `kebab-case`
  - Componentes: `PascalCase`
  - Funções/variáveis: `camelCase`
- **TypeScript**: Strict mode sempre ativado
- **Error Handling**: Try/catch em todas as operações async
- **Validation**: Zod schemas para validação de dados

### 3. UI e Styling
- **ShadCN/UI**: Use apenas componentes do `@/components/ui/`
- **Tailwind**: Prefira classes utilitárias, evite estilos inline
- **Responsividade**: Mobile-first approach
- **Acessibilidade**: Sempre incluir aria-labels e semântica correta

### 4. Services e API
- **Services**: Centralize chamadas API na pasta `services/`
- **Types**: Defina tipos específicos para requests/responses
- **Error Handling**: Padronize tratamento de erros de API
- **Loading States**: Implemente states de loading consistentes

## Commit Message Rules

### Conventional Commits Format
Use: `<type>(<scope>): <description>`

### Commit Types
- `feat`: Nova funcionalidade
- `fix`: Correção de bug
- `refactor`: Refatoração de código
- `style`: Mudanças de formatação/styling
- `docs`: Alterações na documentação
- `test`: Adição/correção de testes
- `chore`: Tarefas de manutenção

### Scopes Específicos do Split Money
- `auth`: Sistema de autenticação
- `transaction`: Gestão de transações
- `category`: Sistema de categorias
- `tag`: Sistema de tags
- `payment`: Status de pagamento
- `dashboard`: Dashboard e relatórios
- `profile`: Perfil do usuário
- `config`: Configurações da aplicação
- `ui`: Componentes de interface
- `api`: API routes e services

### Exemplos de Commits
```
feat(transaction): add recurring transaction support
fix(auth): resolve token expiration handling
refactor(dashboard): improve data loading performance
style(ui): update button hover states
docs: add API documentation for transaction endpoints
```

### Regras para Mensagens
- **Idioma**: Inglês obrigatório
- **Tempo verbal**: Imperativo ("add" não "added")
- **Capitalização**: Primeira letra maiúscula
- **Limite**: Máximo 50 caracteres na descrição
- **Específico**: Sea claro sobre o que foi alterado

## Checklist Antes de Commit
- [ ] TypeScript sem erros
- [ ] Lint passou sem warnings críticos
- [ ] Componentes Server/Client adequadamente marcados
- [ ] Forms usam React Hook Form + Zod
- [ ] Imports usando alias `@/`
- [ ] Error handling implementado
- [ ] Responsividade testada
- [ ] Acessibilidade básica verificada

## Debug e Desenvolvimento
- Use `use-api-debug.ts` hook para debug de APIs
- Implemente loading states usando contexts apropriados
- Teste funcionalidades em different viewport sizes
- Verifique compatibilidade com diferentes browsers
